Stream = require("node-rtsp-stream");
stream = new Stream({
  name: "Bunny",
  // streamUrl: "rtsp://YOUR_IP:PORT",
  //streamUrl: "rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4",
  streamUrl: "rtsp://210.99.70.120:1935/live/cctv001.stream",
  wsPort: 6789,
  ffmpegOptions: { // options ffmpeg flags
    // Add "sourceProtocol: tcp" to use TCP protocol for RTSP stream
    //"-rtsp_transport": "tcp", // This will use TCP for the RTSP stream
    "-f": "mpegts", // output file format.
    //"-codec:v": "mpeg1video", // video codec
    "-codec:v": "h264", // 비디오 코덱을 H.264로 변경
    "-b:v": "1000k", // video bit rate
    "-stats": "",
    "-r": 25, // frame rate
    "-s": "640x480", // video size
    "-bf": 0,
    // audio
    "-codec:a": "mp2", // audio codec
    "-ar": 44100, // sampling rate (in Hz)(in Hz)
    "-ac": 1, // number of audio channels
    "-b:a": "128k", // audio bit rate
    // Additional options
    "-analyzeduration": "10000000", // Set the analyzeduration value (in microseconds)
    "-probesize": "50000000", // 50000000 bytes (50 MB)
  },
});

stream.on('ffmpegError', function(data) {
  console.error('FFmpeg Error:', data);
});

stream.on('ffmpegOutput', function(data) {
  console.log('FFmpeg Output:', data);
});



/////////////////////////
mpeg1muxer.js
var Mpeg1Muxer, child_process, events, util

child_process = require('child_process')

util = require('util')

events = require('events')

Mpeg1Muxer = function(options) {
  var key
  this.url = options.url
  this.ffmpegOptions = options.ffmpegOptions
  this.exitCode = undefined
  this.additionalFlags = []
  if (this.ffmpegOptions) {
    for (key in this.ffmpegOptions) {
      this.additionalFlags.push(key)
      if (String(this.ffmpegOptions[key]) !== '') {
        this.additionalFlags.push(String(this.ffmpegOptions[key]))
      }
    }
  }
  this.spawnOptions = [
    "-i",
    this.url,
    '-f',
    'mpegts',
    '-codec:v',
    'mpeg1video',
    // additional ffmpeg options go here
    ...this.additionalFlags,
    '-'
  ]
  this.stream = child_process.spawn(options.ffmpegPath, this.spawnOptions, {
    detached: false
  })
  this.inputStreamStarted = true
  this.stream.stdout.on('data', (data) => {
    return this.emit('mpeg1data', data)
  })
  this.stream.stderr.on('data', (data) => {
    return this.emit('ffmpegStderr', data)
  })
  this.stream.on('exit', (code, signal) => {
    if (code === 1) {
      console.error('RTSP stream exited with error')
      this.exitCode = 1
      return this.emit('exitWithError')
    }
  })
  return this
}

util.inherits(Mpeg1Muxer, events.EventEmitter)

module.exports = Mpeg1Muxer


//되는 것~~~

mpeg1
this.spawnOptions = [
    // "-i",
    // this.url,
    // '-f',
    // 'mpegts',
    // '-codec:v',
    // 'mpeg1video',
    // // additional ffmpeg options go here
    // ...this.additionalFlags,
    // '-'
    "-rtsp_transport", "tcp", "-i",
    this.url,
    '-f',
    'mpeg1video',
    // '-b:v', '1000k',
    // '-maxrate', '1000k',
    // '-bufsize', '1000k',
    // '-an', '-r', '30',
    // additional ffmpeg options go here
    ...this.additionalFlags,
    '-'
  ]

  서버 app.js

  ffmpegOptions: { // options ffmpeg flags
    "-f": "mpegts", // output file format.
    "-vcodec": "mpeg1video", // video codec
    "-s": "960x540", // video resolution
    "-b:v": "1000k", // video bitrate
    "-r": "50", // video framerate
    "-bf": "0", // B-frames
    "-codec:a": "mp2", // audio codec
    "-ar": "44100", // audio sample rate
    "-ac": "1", // audio channels
    "-b:a": "128k", // audio bitrate
    '-stats': '', // an option with no neccessary value uses a blank string
  },

프론트 app.js
import React, { useEffect, useState } from "react";
import "./App.css";
import JSMpeg from "@cycjimmy/jsmpeg-player";

const ffmpegIP = "localhost";

const App = () => {
  const [player, setPlayer] = useState(null);

  const startPlayer = () => {
    var videoUrl = `ws://${ffmpegIP}:6789/`;
    var player = new JSMpeg.VideoElement("#video-canvas", videoUrl, {
      autoplay: true,
      bufferSize: 2048 * 2048, // 원하는 버퍼 크기로 설정 (디폴트: 512kb)
    });
    setPlayer(player);
    console.log(player);
  };

  return (
    <div id="body">
      <div
        id="title"
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          fontSize: "28px",
          fontWeight: "bold",
          marginTop: "10px",
          marginBottom: "10px",
          color: "blue",
        }}
      >
        Player stream RTSP
      </div>
      <button onClick={startPlayer}>Start Streaming</button>
      <div id="video-canvas" style={{ height: "480px", width: "640px" }}></div>
    </div>
  );
};

export default App;







  안됨 264
  서버
  stream = new Stream({
  name: "Bunny",
  // streamUrl: "rtsp://YOUR_IP:PORT",
  //streamUrl: "rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4",
  streamUrl: "rtsp://210.99.70.120:1935/live/cctv001.stream",
  wsPort: 6789,
  ffmpegOptions: { // options ffmpeg flags
    "-f": "mpegts", // output file format.
    "-vcodec": "libx264", // H.264 video codec
    "-s": "960x540", // video resolution
    "-b:v": "2000k", // video bitrate (you can adjust this as needed)
    "-r": "40", // video framerate
    "-bf": "0", // B-frames
    "-codec:a": "mp2", // audio codec
    "-ar": "44100", // audio sample rate
    "-ac": "1", // audio channels
    "-b:a": "128k", // audio bitrate
    '-stats': '', // an option with no necessary value uses a blank string
  },
});

mpeg1muxer
  this.spawnOptions = [
    "-rtsp_transport", "tcp", "-i",
    this.url,
    '-f', 'mpegts',
    '-codec:v', 'libx264', // Change from 'mpeg1video' to 'libx264' for H.264 codec
    // '-b:v', '1000k',
    // '-maxrate', '1000k',
    // '-bufsize', '1000k',
    // '-an', '-r', '30',
    // additional ffmpeg options go here
    ...this.additionalFlags,
    '-'
  ]